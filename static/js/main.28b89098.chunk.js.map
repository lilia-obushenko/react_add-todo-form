{"version":3,"sources":["api/users.ts","helpers/helpers.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","getUser","userId","usersFromServer","find","user","todos","title","completed","map","todo","UserInfo","className","href","TodoInfo","Paper","elevation","sx","backgroundColor","cn","TodoList","App","useState","setTitle","selectedUser","setselectedUser","titleError","setTitleError","userError","setUserError","todoList","setTodoList","width","margin","padding","Box","action","method","onSubmit","event","preventDefault","trim","newTodo","todosArray","Math","max","Number","TextField","label","type","autoComplete","value","onChange","target","Select","displayEmpty","MenuItem","disabled","Button","variant","ReactDOM","render","document","getElementById"],"mappings":"iTAAe,GACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2B,QCtDJ,SAASC,EAAQC,GACtB,OAAOC,EAAgBC,MAAK,SAAAC,GAAI,OAAIA,EAAKR,KAAOK,MAAW,KAGtD,IAAMI,ECTE,CACb,CACET,GAAI,EACJU,MAAO,qBACPC,WAAW,EACXN,OAAQ,GAEV,CACEL,GAAI,GACJU,MAAO,kBACPC,WAAW,EACXN,OAAQ,GAEV,CACEL,GAAI,EACJU,MAAO,qCACPC,WAAW,EACXN,OAAQ,IDRiCO,KAAI,SAAAC,GAAI,kCAChDA,GADgD,IAEnDL,KAAMJ,EAAQS,EAAKR,a,gCEHRS,EAAsB,SAAC,GAAc,IAAZN,EAAW,EAAXA,KAElCP,EAEEO,EAFFP,KACAE,EACEK,EADFL,MAGF,OACE,mBAAGY,UAAU,WAAWC,KAAI,iBAAYb,GAAxC,SACGF,KCLMgB,G,MAAsB,SAAC,GAAc,IAAZJ,EAAW,EAAXA,KAElCb,EAIEa,EAJFb,GACAU,EAGEG,EAHFH,MACAC,EAEEE,EAFFF,UACAH,EACEK,EADFL,KAGF,OACE,cAACU,EAAA,EAAD,CAAOC,UAAW,EAAGC,GAAI,CAAEC,gBAAiB,WAA5C,SACE,0BACE,UAASrB,EACTe,UAAWO,IAAG,WAAY,CACxB,sBAAuBX,IAH3B,UAOE,oBAAII,UAAU,kBAAd,SACGL,IAGFF,GACC,cAAC,EAAD,CAAUA,KAAMA,WCzBbe,EAAsB,SAAC,GAAe,IAAbd,EAAY,EAAZA,MACpC,OACE,yBAASM,UAAU,WAAnB,SACGN,EAAMG,KAAI,SAAAC,GAAI,OACb,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKb,UCWfwB,EAAU,WACrB,MAA0BC,mBAAS,IAAnC,mBAAOf,EAAP,KAAcgB,EAAd,KACA,EAAwCD,mBAAS,IAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAAgCP,mBAAShB,GAAzC,mBAAOwB,EAAP,KAAiBC,EAAjB,KA2CA,OACE,qBAAKnB,UAAU,MAAf,SACE,cAACG,EAAA,EAAD,CACEC,UAAW,EACXC,GAAI,CACFe,MAAO,cACPC,OAAQ,OACRC,QAAS,EACThB,gBAAiB,WANrB,SASE,eAACiB,EAAA,EAAD,WACE,oBAAIvB,UAAU,QAAd,2BAEA,uBACEwB,OAAO,aACPC,OAAO,OACPC,SArDW,SAACC,GAWpB,GAVAA,EAAMC,iBAEDjC,EAAMkC,QACTd,GAAc,GAGXH,GACHK,GAAa,GAGXtB,GAASiB,EAAc,CACzB,IAAMkB,EAAgB,CACpB7C,ILlCqB8C,EKkCJrC,ELjCTsC,KAAKC,IAAL,MAAAD,KAAI,YAAQD,EAAWlC,KAAI,SAAAC,GAAI,OAAIA,EAAKb,QAEvC,GKgCTU,QACAL,OAAQ4C,OAAOtB,GACfhB,WAAW,EACXH,KAAMJ,EAAQ6C,OAAOtB,KAGvBO,EAAY,GAAD,mBAAKD,GAAL,CAAeY,KAxB5BnB,EAAS,IACTE,EAAgB,ILlBQ,IAACkB,GKuEnB,UAKE,sBAAK/B,UAAU,QAAf,UACE,cAACmC,EAAA,EAAD,CACE9B,GAAI,CAAEe,MAAO,KACbgB,MAAM,gBACNC,KAAK,OACLC,aAAa,MACbC,MAAO5C,EACP6C,SApCY,SAACb,GACzBhB,EAASgB,EAAMc,OAAOF,OACtBxB,GAAc,MAqCHD,GACC,qBAAKd,UAAU,QAAf,qCAIJ,sBAAKA,UAAU,QAAf,UACE,eAAC0C,EAAA,EAAD,CACErC,GAAI,CAAEe,MAAO,KACbuB,cAAY,EACZJ,MAAO3B,EACP4B,SA5CW,SAACb,GACxBd,EAAgBc,EAAMc,OAAOF,OAC7BtB,GAAa,IAsCH,UAME,cAAC2B,EAAA,EAAD,CAAUL,MAAM,GAAGM,UAAQ,EAA3B,2BAICtD,EAAgBM,KAAI,gBAAGZ,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACnB,cAAC0D,EAAA,EAAD,CAAUL,MAAOtD,EAAjB,SACGC,GADuBD,SAM7B+B,GACC,qBAAKhB,UAAU,QAAf,qCAIJ,cAAC8C,EAAA,EAAD,CACEzC,GAAI,CAAEe,MAAO,KACb2B,QAAQ,YACRV,KAAK,SAHP,oBASF,cAAC,EAAD,CAAU3C,MAAOwB,YCtI3B8B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.28b89098.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\nimport usersFromServer from '../api/users';\nimport todosFromServer from '../api/todos';\n\nexport function getUser(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const getTodoNewId = (todosArray: Todo[]) => {\n  const newId = Math.max(...todosArray.map(todo => todo.id));\n\n  return newId + 1;\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { FC } from 'react';\nimport { User } from '../../types/User';\nimport './User.scss';\n\ninterface Props {\n  user: User\n}\n\nexport const UserInfo: FC<Props> = ({ user }) => {\n  const {\n    name,\n    email,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport cn from 'classnames';\nimport { Paper } from '@mui/material';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Todo } from '../../types/Todo';\nimport './TodoInfo.scss';\n\ninterface Props {\n  todo: Todo\n}\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <Paper elevation={2} sx={{ backgroundColor: '#e0f7fa' }}>\n      <article\n        data-id={id}\n        className={cn('TodoInfo', {\n          'TodoInfo--completed': completed,\n        })}\n      >\n\n        <h2 className=\"TodoInfo__title\">\n          {title}\n        </h2>\n\n        {user && (\n          <UserInfo user={user} />\n        )}\n      </article>\n    </Paper>\n  );\n};\n","import { FC } from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[]\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import {\n  ChangeEvent,\n  FC,\n  FormEvent,\n  useState,\n} from 'react';\n\nimport './App.scss';\nimport {\n  Box,\n  Paper,\n  TextField,\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  Button,\n} from '@mui/material';\n\nimport usersFromServer from './api/users';\nimport { getUser, todos, getTodoNewId } from './helpers/helpers';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nexport const App: FC = () => {\n  const [title, setTitle] = useState('');\n  const [selectedUser, setselectedUser] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n  const [todoList, setTodoList] = useState(todos);\n\n  const handleClear = () => {\n    setTitle('');\n    setselectedUser('');\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      setTitleError(true);\n    }\n\n    if (!selectedUser) {\n      setUserError(true);\n    }\n\n    if (title && selectedUser) {\n      const newTodo: Todo = {\n        id: getTodoNewId(todos),\n        title,\n        userId: Number(selectedUser),\n        completed: false,\n        user: getUser(Number(selectedUser)),\n      };\n\n      setTodoList([...todoList, newTodo]);\n\n      handleClear();\n    }\n  };\n\n  const handleChangeTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setTitleError(false);\n  };\n\n  const handleChangeUser = (event: SelectChangeEvent) => {\n    setselectedUser(event.target.value);\n    setUserError(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <Paper\n        elevation={3}\n        sx={{\n          width: 'max-content',\n          margin: 'auto',\n          padding: 3,\n          backgroundColor: '#e1f5fe',\n        }}\n      >\n        <Box>\n          <h1 className=\"title\">Add todo form</h1>\n\n          <form\n            action=\"/api/users\"\n            method=\"POST\"\n            onSubmit={handleSubmit}\n          >\n            <div className=\"field\">\n              <TextField\n                sx={{ width: 300 }}\n                label=\"Enter a title\"\n                type=\"text\"\n                autoComplete=\"off\"\n                value={title}\n                onChange={handleChangeTitle}\n              />\n\n              {titleError && (\n                <div className=\"error\">Please enter a title</div>\n              )}\n            </div>\n\n            <div className=\"field\">\n              <Select\n                sx={{ width: 300 }}\n                displayEmpty\n                value={selectedUser}\n                onChange={handleChangeUser}\n              >\n                <MenuItem value=\"\" disabled>\n                  Choose a user\n                </MenuItem>\n\n                {usersFromServer.map(({ id, name }) => (\n                  <MenuItem value={id} key={id}>\n                    {name}\n                  </MenuItem>\n                ))}\n              </Select>\n\n              {userError && (\n                <div className=\"error\">Please choose a user</div>\n              )}\n            </div>\n\n            <Button\n              sx={{ width: 300 }}\n              variant=\"contained\"\n              type=\"submit\"\n            >\n              Add\n            </Button>\n          </form>\n\n          <TodoList todos={todoList} />\n        </Box>\n      </Paper>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}