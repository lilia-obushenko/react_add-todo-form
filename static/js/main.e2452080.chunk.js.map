{"version":3,"sources":["api/users.ts","helpers/helpers.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","getUser","userId","usersFromServer","find","user","todos","title","completed","map","todo","UserInfo","className","href","TodoInfo","cn","TodoList","App","useState","setTitle","selectedUserId","setSelectedUserId","titleError","setTitleError","userError","setUserError","todoList","setTodoList","action","method","onSubmit","event","preventDefault","trim","newTodo","todosArray","Math","max","htmlFor","type","value","placeholder","onChange","target","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2452080.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\nimport usersFromServer from '../api/users';\nimport todosFromServer from '../api/todos';\n\nexport function getUser(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const getTodoNewId = (todosArray: Todo[]) => {\n  const newId = Math.max(...todosArray.map(todo => todo.id));\n\n  return newId + 1;\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { FC } from 'react';\nimport { User } from '../../types/User';\nimport './User.scss';\n\ninterface Props {\n  user: User\n}\n\nexport const UserInfo: FC<Props> = ({ user }) => {\n  const {\n    name,\n    email,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport cn from 'classnames';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Todo } from '../../types/Todo';\nimport './TodoInfo.scss';\n\ninterface Props {\n  todo: Todo\n}\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[]\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import {\n  ChangeEvent,\n  FC,\n  FormEvent,\n  useState,\n} from 'react';\nimport './App.scss';\nimport usersFromServer from './api/users';\nimport { getUser, todos, getTodoNewId } from './helpers/helpers';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nexport const App: FC = () => {\n  const [title, setTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n  const [todoList, setTodoList] = useState(todos);\n\n  const handleClear = () => {\n    setTitle('');\n    setSelectedUserId(0);\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      setTitleError(true);\n    }\n\n    if (!selectedUserId) {\n      setUserError(true);\n    }\n\n    if (title && selectedUserId) {\n      const newTodo: Todo = {\n        id: getTodoNewId(todos),\n        title,\n        userId: selectedUserId,\n        completed: false,\n        user: getUser(selectedUserId),\n      };\n\n      setTodoList([...todoList, newTodo]);\n\n      handleClear();\n    }\n  };\n\n  const handleChangeTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setTitleError(false);\n  };\n\n  const handleChangeUser = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(Number(event.target.value));\n    setUserError(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            value={title}\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            onChange={handleChangeTitle}\n          />\n\n          {titleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"user\"\n            value={selectedUserId}\n            onChange={handleChangeUser}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(({ id, name }) => (\n              <option\n                value={id}\n                key={id}\n              >\n                {name}\n              </option>\n            ))}\n          </select>\n\n          {userError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todoList} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}